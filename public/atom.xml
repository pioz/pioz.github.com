<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[programmer@work]]></title>
  <link href="http://blog.pioz.it/atom.xml" rel="self"/>
  <link href="http://blog.pioz.it/"/>
  <updated>2016-11-19T04:39:07+01:00</updated>
  <id>http://blog.pioz.it/</id>
  <author>
    <name><![CDATA[Pioz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[World of Warcraft leaderboards: is arena PvP balanced?]]></title>
    <link href="http://blog.pioz.it/world-of-warcraft-leaderboards-is-arena-pvp-balanced"/>
    <updated>2016-11-19T04:04:39+01:00</updated>
    <id>http://blog.pioz.it/world-of-warcraft-leaderboards-is-arena-pvp-balanced</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve created a little script in Ruby to grab some data from the World of
Warcraft 2v2 and 3v3 PvP leaderboards. On <a href="https://gist.github.com/pioz/479f6be0a53900f554b8d6a15828e040">Github</a>
you can find the source code of the script:</p>

<div><script src='https://gist.github.com/479f6be0a53900f554b8d6a15828e040.js'></script>
<noscript><pre><code>require &#39;nokogiri&#39;
require &#39;open-uri&#39;
require &#39;gruff&#39;

# Extend Pie chart class to set custom labels
class LabeledPie &lt; Gruff::Pie
  def data(name, data_points = [], options = {})
    super(name, data_points, options[:color])
    @data.each { |data_array| data_array &lt;&lt; options[:label] }
  end
  private
  def slice_class
    CustomLabeledSlice
  end
  class CustomLabeledSlice &lt; ::Gruff::Pie::PieSlice
    def label
      data_array[3] || super
    end
  end
end

# URL where we grab the data
url = &#39;https://worldofwarcraft.com/en-gb/game/pvp/leaderboards&#39;

# Wow Class colors
COLORS = {
    mage: &#39;#68ccef&#39;,
    monk: &#39;#00ffba&#39;,
    priest: &#39;#ffffff&#39;,
    warlock: &#39;#9382c9&#39;,
    deathknight: &#39;#c41e3b&#39;,
    paladin: &#39;#f48cba&#39;,
    warrior: &#39;#c69b6d&#39;,
    rogue: &#39;#fff468&#39;,
    shaman: &#39;#2359ff&#39;,
    druid: &#39;#ff7c0a&#39;,
    demonhunter: &#39;#a330c9&#39;,
    hunter: &#39;#aad372&#39;
  }

%w(2v2 3v3).each do |arena|

  # Plus 1 the counter when we found the wow class in the leaderboard
  counters = {
    mage: 0,
    monk: 0,
    priest: 0,
    warlock: 0,
    deathknight: 0,
    paladin: 0,
    warrior: 0,
    rogue: 0,
    shaman: 0,
    druid: 0,
    demonhunter: 0,
    hunter: 0
  }
  tot = 0

  # Parse the 10 pages of the leaderboard
  10.times do |i|
    doc = Nokogiri::HTML(open(&quot;#{url}/#{arena}?page=#{i+1}&quot;))
    doc.search(&#39;a.Character&#39;).each do |row|
      counters.each do |klass, count|
        if row[:class].downcase.include?(klass.to_s)
          counters[klass] += 1
          tot += 1
          break
        end
      end
    end
  end

  # Sort counters
  counters = counters.sort{|x, y| y[1] &lt;=&gt; x[1]}

  # Generate pie graph
  g = LabeledPie.new
  g.title = &quot;Stats #{arena} updated at #{Time.now.strftime(&#39;%d/%m/%Y&#39;)} for\nthe first #{tot} best EU players&quot;
  g.legend_font_size = 14
  g.marker_font_size = 12
  g.colors = []
  counters.each { |klass, counter| g.colors &lt;&lt; COLORS[klass] }
  counters.each do |klass, counter|
    g.data(klass.to_s.capitalize, counter, label: &quot;#{klass.to_s.capitalize}: #{(counter*100.0/tot).round}% (#{counter})&quot;)
  end
  g.write(&quot;stats_#{arena}.png&quot;)

end
</code></pre></noscript></div>


<p>This script parse these leaderboards pages
<a href="https://worldofwarcraft.com/en-gb/game/pvp/leaderboards/2v2">https://worldofwarcraft.com/en-gb/game/pvp/leaderboards/2v2</a>
and count for every class the number of players. Then generate a pie graph to
see which classes are most frequent in the leaderboards.</p>

<p>If you run the script with the command <code>ruby wowpvpstats.rb</code> after few seconds
you can find two png images like these:</p>

<p><img src="http://blog.pioz.it/images/posts/stats_2v2.png" alt="2v2 graph" /></p>

<p>and</p>

<p><img src="http://blog.pioz.it/images/posts/stats_3v3.png" alt="3v3 graph" /></p>

<p>Now you can easily see which classes are more present in the leaderboards:
<em>druids</em>, <em>shamans</em> and <em>monks</em> dominate the leaderboard while <em>mages</em> and
<em>hunters</em> suck. So, what do you think? Is this PvP balanced?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Il numero 666]]></title>
    <link href="http://blog.pioz.it/il-numero-666"/>
    <updated>2015-03-26T23:26:44+01:00</updated>
    <id>http://blog.pioz.it/il-numero-666</id>
    <content type="html"><![CDATA[<p>Oggi vi voglio parlare di qualcosa di diverso dall'informatica, qualcosa di
carattere storico, biblico. Parliamo del famoso numero 666. Tanti lo
associano al diavolo, ma in realtà si riferisce ad una persona.
Vediamo questo breve passo dell'Apocalisse di San Giovanni (Ap 13,16-18):</p>

<blockquote><p>Faceva sì che tutti, piccoli e grandi, ricchi e poveri, liberi e schiavi
ricevessero un marchio sulla mano destra e sulla fronte; e che nessuno
potesse comprare o vendere senza avere tale marchio, cioè il nome della
bestia o il numero del suo nome. Qui sta la sapienza. Chi ha intelligenza
calcoli il numero della bestia: essa rappresenta un nome d'uomo. E tal cifra
è seicentosessantasei.</p></blockquote>

<p>Parafrasando: quest'uomo faceva in modo che tutti, piccoli e grandi, ricchi
e poveri, liberi e schiavi venissero plagiati nel lavoro e nella mente, nel
pensiero; e che nessuno potesse vivere senza essere plagiato (nessuno è più
libero). E qui sta la sapienza, nel capire chi è il male. Chi è intelligente
calcoli il numero della bestia: questa bestia è un uomo malvagio. E questo
numero è il 666.</p>

<p>Si pensa che questo uomo sia l'imperatore romano Cesare Nerone che era al
potere nei primi anni dopo la morte di Cristo; si pensa infatti che il
numero 666 non sia altro che il multigramma di calaba ebraica, un modo per
scrivere le lettere con i numeri; infatti come in greco antico, così anche
in alfabeto ebraico i numeri venivano scritti usando le lettere, secondo,
appunto la cabala ebraica. Prendendo dunque le consonanti del nome <strong>QeSaR
NeRON</strong> (קסר נרון) si ha:</p>

<pre><code>Q (qof)     = 100
S (sameckh) = 60
R (resh)    = 200
N (nun)     = 50
R (resh)    = 200
O (waw)     = 6
N (nun)     = 50
</code></pre>

<p>se sommiamo le cifre otteniamo il numero 666 (la vocale O è in realtà legata
alla consonante W che è una <em>mater lectionis</em>, cioè una consonante che
serviva a evitare equivoci nella lettura). Ovviamente questa è un'ipotesi
degli studiosi, infatti la gematria (cioè l'utilizzo della corrispondenza
fra numeri e lettere dell'alfabeto ebraico, greco o latino) può produrre
molti risultati diversi e costituisce più un gioco intellettuale che uno
strumento d'indagine.</p>

<p>Comunque quello che mi preme dire è che Nerone era in quel tempo il capo
dell'Impero Romano dove girava tutta l'economia e il denaro. Quindi mi vien
da pensare che la &ldquo;bestia&rdquo;, il male, che solo i sapienti riusciranno a
riconoscere, è il denaro.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Module include vs prepend]]></title>
    <link href="http://blog.pioz.it/ruby-module-include-vs-prepend"/>
    <updated>2015-01-15T15:15:18+01:00</updated>
    <id>http://blog.pioz.it/ruby-module-include-vs-prepend</id>
    <content type="html"><![CDATA[<p>Oggi cerchiamo di capire un po' meglio la differenza tra i metodi <code>Module#include</code> e <code>Module#prepend</code>.
Vediamo la differenza con un esempio mooolto semplice:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Person
</span><span class='line'>  def name
</span><span class='line'>    # return name here
</span><span class='line'>    puts 'Call method name in class Person'
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>module Superhero
</span><span class='line'>  def fly
</span><span class='line'>    # fly here
</span><span class='line'>    puts 'Call method fly in module Superhero'
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def name
</span><span class='line'>    # return name here
</span><span class='line'>    puts 'Call method name in module Superhero'
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Person.include(Superhero)
</span><span class='line'>
</span><span class='line'>Person.new.name</span></code></pre></td></tr></table></div></figure>


<p>Cosa abbiamo fatto? Allora abbiamo la classe <code>Person</code> con un metodo <code>name</code>. Poi
abbiamo il modulo <code>Superhero</code> con due metodi: <code>fly</code> e <code>name</code>. Notare a questo
punto che sia la classe <code>Person</code> che il modulo <code>Superhero</code> hanno entrambi un
metodo che si chiama <code>name</code>. Ora andiamo a mixare la classe <code>Person</code> con il
modulo <code>Superhero</code> usando il metodo <code>include</code>. Se invochiamo il metodo <code>name</code> su
un oggetto di tipo <code>Person</code> vedremo che viene chiamato il metodo definito dentro
la classe <code>Person</code> e non quello definito nel modulo <code>Superhero</code>.   Questo ci
potrebbe anche andare bene, ma a volte vorremmo che quando facciamo questo tipo
di operazione i metodi del modulo che mixiamo sovrascrivessero (override) i
metodi della classe, come succede quando estendiamo una classe. Per ottenere
questo usiamo il metodo <code>prepend</code> al posto di <code>include</code> disponibile dalla
versione 2 di Ruby.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Person.prepend(Superhero)
</span><span class='line'>
</span><span class='line'>Person.new.name</span></code></pre></td></tr></table></div></figure>


<p>Adesso vediamo che viene invocato il metodo <code>name</code> definito nel modulo <code>Superhero</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Edit git last commit]]></title>
    <link href="http://blog.pioz.it/edit-git-last-commit"/>
    <updated>2015-01-13T14:44:28+01:00</updated>
    <id>http://blog.pioz.it/edit-git-last-commit</id>
    <content type="html"><![CDATA[<p>Oggi mi è capitato questa situazione mentre stavo fixando una issue di
<a href="https://github.com/pioz/chess">Chess</a>, una mia gemma per Ruby su github: in
pratica ho fixato il problema e ho fatto un commit <code>git commit -am "fix issue
bla bla"</code>. Mi sono poi accorto che non ho aumentato il numero di versione della
gemma e che quindi non potevo pusharla su Rubygems. A questo punto potevo
modificare il numero di versione e fare un secondo commit, ma questo non mi
andava, mi sarebbe piaciuto modificare l'ultimo commit e includere la modifica
del file <code>version.rb</code>.<br/>
Come fare? Facciamo la nostra modifica al file <code>version.rb</code> aumentando la
versione della gemma e committiamo il tutto con il comando:</p>

<pre><code>git commit -a --amend --no-edit
</code></pre>

<p>Bene! Abbiamo modificato l'ultimo commit. Ultima cosa da aggiungere: se avevate
già fatto il push dell'ultimo commit lo SHA-1 di questo sarà cambiato dopo
questa operazione e quindi bisognerà pushare le modifiche usando l'opzione
<code>--force</code></p>

<pre><code>git push -f  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's predefined variables: DATA]]></title>
    <link href="http://blog.pioz.it/rubys-predefined-variables-data"/>
    <updated>2015-01-13T00:09:44+01:00</updated>
    <id>http://blog.pioz.it/rubys-predefined-variables-data</id>
    <content type="html"><![CDATA[<p>Ho scoperto da poco che tra le variabili predefiniti di Ruby ne esiste una che
si chiama <code>DATA</code>. È molto interessante.<br/>
In un file sorgente Ruby tutto quello che segue <code>__END__</code> diventa una specie
di file virtuale e può essere letto appunto tramite la variabile predefinita
<code>DATA</code>.
Ecco un esempio:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts DATA.read.split("\n")
</span><span class='line'>__END__
</span><span class='line'>tomatoes
</span><span class='line'>potatoes
</span><span class='line'>milk
</span><span class='line'>beer
</span><span class='line'>salt
</span><span class='line'>beer again</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quanto grande è l'universo?]]></title>
    <link href="http://blog.pioz.it/quanto-grande-e-luniverso"/>
    <updated>2014-12-27T17:44:00+01:00</updated>
    <id>http://blog.pioz.it/quanto-grande-e-luniverso</id>
    <content type="html"><![CDATA[<p>In certi momenti ci si riesce ad accorgere quanto sia enorme l'universo, anche
se facciamo fatica a concepirlo. Dalle stelle più vicine a vastissimi
supergruppi di galassie, a distanze di miliardi di anni luce fino ai limiti di
ciò che è possibile vedere. L'universo è grande&hellip; veramente grosso. Non avete
idea di quanto enorme esso sia. L'universo comprende qualsiasi cosa che esiste,
si pensa così. Sempre che ce ne siano altri, e il nostro è solo uno su trilioni,
ma questo è un argomento per un altro articolo.</p>

<h5>Davanti all'uscio di casa</h5>

<p>Ok, quindi tutti sappiamo di vivere in una galassia chiamata la
<a href="http://it.wikipedia.org/wiki/Via_Lattea">Via Lattea</a> che contiene qualche
centinaio di miliardi di stelle, delle quali il Sole è solo una delle tante. Se
la Via Lattea fosse ridotta a un disco di 10 metri di diametro, il nostro intero
sistema solare misurerebbe non più di 0.1 millimetri. In una bella notte col
cielo sereno saremmo in grado di vedere lo 0.000003% di tutte le stelle che sono
presenti nella nostra galassia.   Dunque prendiamo una di quelle stelle, la più
vicina al nostro Sole, infatti. È una stella nana rossa chiamata
<a href="http://it.wikipedia.org/wiki/Proxima_Centauri">Proxima Centauri</a> che dista 4.24
anni luce. È troppo piccola perché sia visibile a occhio nudo, ma la sua luce
impiega più di quattro anni per raggiungerci. Se voleste intraprendere un
viaggio a Proxima Centauri usando la tecnologia aerospaziale adesso disponibile
a noi terrestri, ci mettereste tra i 70000 e 80000 anni per arrivare. Se
avessimo scoperto il metodo per viaggiare alla velocità della luce, ci
metteremmo comunque più di quattro anni e un quarto per raggiungere la
destinazione. In altri termini, 9 anni e mezzo per un viaggio di andata e
ritorno. Tutto ciò riguarda la nostra stella vicina di casa, dietro l'angolo.
Niente a che fare con viaggi attraverso l'universo.<br/>
Se voleste attraversare la vostra spirale di casa, la Via Lattea da una parte
all'altra, impieghereste niente meno di 100 mila anni. Tale durata è
approssimativamente 1250 vite medie umane. No, non confondete queste cifre
legandole alle reali capacità dei nostri mezzi aerospaziali, queste tempistiche
sono calcolate alla velocità della luce. Viaggiando così veloce, potreste
completare in un secondo 7 volte il giro della Terra.<br/>
Che cosa succederebbe se voleste visitare la nostra galassia più vicina a questa
velocità? Per raggiungere la galassia
<a href="http://it.wikipedia.org/wiki/Galassia_di_Andromeda">Andromeda</a>, uscendo dalla
Via Lattea, v'imbarchereste in un viaggio di 2 milioni e mezzo di anni.<br/>
Possiamo mettere questi fatti sotto la giusta luce, l'universo è comunque
un'entità intera e immensa, molto più grande, a  confronto di queste piccole
galassie.</p>

<h5>Gruppi e supergruppi galattici</h5>

<p>Qui le cifre iniziano a essere vagamente terrificanti. Ci sono miliardi su
miliardi su miliardi di altre galassie in giro, proprio come la Via Lattea e
Andromeda, ognuna con il proprio centinaio di miliardi di sistemi solari e i
suoi trilioni di pianeti. Se uscite da questo perimetro e guardate a un contesto
ulteriormente espanso, vedrete galassie che sembrano ammassate l'una sull'altra;
queste sono i
<a href="http://it.wikipedia.org/wiki/Gruppi_e_ammassi_di_galassie">gruppi di galassie</a>.
Sono collezioni di galassie che partono da 50 e arrivano fino a 1000. Si giunge
infine ai
<a href="http://it.wikipedia.org/wiki/Superammasso_di_galassie">supergruppi galattici</a>,
dei giganteschi conglomerati che rappresentano la scala massima dei gruppi
galattici. Questi ultimi sono le cose più grandi conosciute dalla razza umana,
formati da gruppi di galassie e supergruppi che diventano enormi superstrutture
cosmiche che occupano milioni di anni luce o persino miliardi di anni luce. Sono
immaginabili come muri colossali, fogli e filamenti di galassie. Sono oggetti di
proporzioni inimmaginabili, che occupano grandi sezioni dell'universo visibile.
Se ci inoltriamo ancora più fuori, i gruppi e supergruppi si formano intorno a
zone di vuoto cosmico e assomigliano a strutture come una spugna o una pagnotta
di pane. I gruppi galattici sono il pane e i vuoti sono le bolle d'aria.</p>

<h5>Tempo</h5>

<p>Allora, quanto è grande l'intero universo? Beh, nessuno conosce la risposta
esatta. Possiamo solo osservare, il più lontano possibile, in tutte le direzioni
ma, è proprio in quel momento che ci scontriamo con un muro solido di mattoni.
La distanza non è il problema saliente quando puntiamo a osservare i limiti
dell'universo, bensì il tempo. Al cosmo si attribuisce un'età pari a 13.7
miliardi di anni e con la stessa misura si pensa a qualsiasi cosa che sia
distante da noi 13.7 miliardi di anni luce. Dopo tale distanza è ragionevole
pensare che qualsiasi informazione precedente al
<a href="http://it.wikipedia.org/wiki/Big_Bang">Big Bang</a> che viaggia alla velocità
della luce non ha ancora raggiunto il nostro pianeta. Tutto ciò rende l'universo
visibile a noi una sfera con raggio di circa tredici miliardi di anni luce. Nel
momento che sono stati scritti tali numeri, tredici miliardi d'anni luce sono la
distanza della più lontana galassia mai vista.<br/>
Ma che si dice della rapida espansione dell'universo e di quella misteriosa
energia oscura che costantemente accellera l'espansione? ebbene questa
espansione ha allargato lo spazio nel frattempo e rende attualmente osservabile
il nostro universo fino a 78 miliardi di anni luce ovvero una sfera osservabile
larga 156 miliardi di anni luce. Semplicemente diciamo che una stella lontana
13.7 miliardi di anni luce ha emesso un fotone (sebbene ciò sia impossibile
perchè sarebbe successo all'inizio del tutto, prendiamo l'esempio per buono)
dopo di che, ora che quel fotone raggiunge la Terra, il punto di partenza di
quel fotone non è più distante 13.7 miliardi di anni luce bensì a 78 miliardi
di anni luce. La luce non ha viaggiato attraverso 78 miliardi di anni luce, ma
lo spazio tra noi e il punto di partenza si è allungato. Allora i fotoni di
luce che vediamo da oggetti tanto distanti sono in realtà già più lontani
rispetto al momento che la luce è stata emessa.<br/>
C'è un punto dove è diventato impossibile viaggiare, per la luce o di
qualsiasi altro tipo di radiazione; questo punto è più recente di 380 mila
anni dopo il Big Bang. Astronomi non vedrebbero mai nessun tipo di luce da quel
tempo: nessuna luce visibile o raggi gamma o ultravioletti e nemmeno segnali
radio; niente che deriva dallo spettro elettromagnetico. Forse avete notato
quello strano ammasso di blocchi blu e verdi (vedi sotto): quello si chiama la
<a href="http://it.wikipedia.org/wiki/Radiazione_cosmica_di_fondo">radiazione cosmica di fondo</a>.
In altri termini è l'alone di luce residua del Big Bang e la radiazione di
sfondo a microonde cosmiche segna il punto laddove l'universo divenne
trasparente alle radiazioni. Appariva opaco prima di quel momento, opaco come il
centro di una stella.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/a/a5/WMAP.jpg" alt="Radiazione cosmica di fondo" /></p>

<p>I colori che cambiano sulla Radiazione di sfondo a microonde cosmiche mostrano
delle piccole variazioni di temepratura in quanto il neonato universo si
raffreddò e divenne trasparente. Queste piccole variazioni di temperatura
implicano la presenza di densità variabili e lo schema corrisponde alle
località dove i gruppi giganti di  galassie così come i supergruppi sono
situati oggi.</p>

<h5>Cosa si cela oltre?</h5>

<p>In conclusione gli astronomi mirano a osservare fino ai limiti di questa sfera
che porta un raggio di 78 miliardi di anni luce, ma persino questa ampiezza
rappresenta probabilmente una minuscola parte di ciò che potrebbe veramente
esistere. Nessuno lo sà per certo ma gli scienziati stimano che questa porzione
corrisponda a circa un decimillesimo di ciò che potrebbe esserci là fuori.<br/>
Come sarebbe l'universo oltre questa barriera? Sarebbe lo stesso ovunque oppure
le leggi fisiche cambierebbero? Quali mondi e altre civiltà si nascondono là
fuori ma permanentemente fuori dalla nostra portata? Prosegue all'infinito o
altrimenti ha un bordo? Pare che gran parte dell'universo stia oltre i nostri
telescopi, la nostra comprensione e forse persino la nostra immaginazione. E se
prima del Big Bang c'era il nulla, cosa o chi ha scatenato quella scintilla che
ha dato origine al nostro universo? Forse Dio?</p>

<p>Fonte: <a href="http://getprismatic.com/story/1419368520134">http://getprismatic.com/story/1419368520134</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ALSA: Switch audio output to USB headset]]></title>
    <link href="http://blog.pioz.it/alsa-switch-audio-output-to-usb-headset"/>
    <updated>2014-09-17T13:31:00+02:00</updated>
    <id>http://blog.pioz.it/alsa-switch-audio-output-to-usb-headset</id>
    <content type="html"><![CDATA[<p>Ho acquistato delle cuffie wireless USB, per essere preciso esattamente queste:
<a href="http://www.amazon.it/gp/product/B005FY61MM">http://www.amazon.it/gp/product/B005FY61MM</a> . Sono molto comode e funzionano su
Debian out-of-the-box ovvero senza installare alcun driver.</p>

<p>Adesso nella mia Debian ho questo problema: vorrei che quando inserisco il
ricevitore USB in automatico l'output di ALSA cambi dalla scheda audio integrata
alle cuffie wireless.</p>

<p>Questo può essere fatto usando le regole di udev (udev è il gestore dei
dispositivi per il kernel Linux e amministra dinamicamente i dispositivi a
blocchi per ogni periferica rilevata nel sistema).
Iniziamo: apriamo il file <code>/etc/udev/rules.d/00-local.rules</code> e se non esiste lo
creiamo; aggiungiamo le seguenti regole:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Set USB headset as default sound card when plugged in
</span><span class='line'>KERNEL=="pcmC[D0-9cp]*", ACTION=="add", PROGRAM="/bin/sh -c 'K=%k; K=$${K#pcmC}; K=$${K%%D*}; echo defaults.ctl.card $$K &gt; /etc/asound.conf; echo defaults.pcm.card $$K &gt;&gt;/etc/asound.conf'"
</span><span class='line'>
</span><span class='line'># Restore default sound card when USB headset unplugged
</span><span class='line'>KERNEL=="pcmC[D0-9cp]*", ACTION=="remove", PROGRAM="/bin/sh -c 'echo defaults.ctl.card 0 &gt; /etc/asound.conf; echo defaults.pcm.card 0 &gt;&gt;/etc/asound.conf'"</span></code></pre></td></tr></table></div></figure>


<p>In pratica quando viene inserito il ricevitore USB udev lo detecta e lancia
uno script per cambiare il file <code>/etc/asound.conf</code> cambiando il device di output
con quello delle cuffie appena inserite.</p>

<p>L'unica pecca è che quando viene cambiato l'output di ALSA tutti i programmi che
stanno usando ALSA devono essere riavviti. Se trovate un modo per risolvere
questo problema fatemi sarepe!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A che altezza appendere un quadro?]]></title>
    <link href="http://blog.pioz.it/a-che-altezza-appendere-un-quadro"/>
    <updated>2014-07-22T14:57:00+02:00</updated>
    <id>http://blog.pioz.it/a-che-altezza-appendere-un-quadro</id>
    <content type="html"><![CDATA[<p>Per appendere i quadri mi piace molto seguire lo stile della <em>linea mediana</em>.
In pratica si traccia una linea immaginaria sulla parete che sta a 5/8
dell'altezza della parete stessa. Una volta che abbiamo a mente questa linea
i quadri vanno appesi con i 3/8 della loro altezza sopra la linea mediana.</p>

<p>Quindi la formula per calcolare l'altezza dove appendere un quadro è:</p>

<pre><code>h = (H*5 + q*3) / 8
</code></pre>

<p>dove <code>H</code> è l'altezza della parete dove volete appendere il quadro e <code>q</code> è
l'altezza del quadro stesso.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configurare più monitor con scheda video NVidia e Xorg]]></title>
    <link href="http://blog.pioz.it/configurare-piu-monitor-con-scheda-video-nvidia-e-xorg"/>
    <updated>2014-01-25T13:04:00+01:00</updated>
    <id>http://blog.pioz.it/configurare-piu-monitor-con-scheda-video-nvidia-e-xorg</id>
    <content type="html"><![CDATA[<p>L'altro giorno mi sono trovato a configurare un dual monitor più connessione alla TV sul mio
pc fisso che monta una Debian con una scheda video NVidia GeForce GTX 650.</p>

<p>La configurazione che ho fatto è questa:</p>

<ul>
<li>monitor Samsung 24" come principale</li>
<li>monitor QBel 19" a destra del monitor principale</li>
<li>TV che clona il monitor principale</li>
</ul>


<p>Dato che il il monitor principale ha una risoluzione massima di 1920x1080,
mentre la TV soltanto 720x480 (si è una di quelle ancora col tubo catodico) non si riesce a fare un clone pieno, ovvero proiettare i 1920x1080 pixel del monitor principale sui 720x480 pixel della TV. Quindi mi sono accontentato di proiettare i 720x480 pixel della parte centrale del monitor principale sulla TV. In questo modo se apro un film con VLC basta che ridimensioni la finestra a 720x480 al centro del monitor per vedere il film in full screen sulla TV (ho uno scriptino che me lo fa, ma questo magari lo vedremo un altro giorno).</p>

<p>Quindi vediamo come fare sta roba.
Apriamo il nostro file <code>/etc/X11/xorg.conf</code>, il file di configurazione principale per Xorg (open source implementation of the X Window System). Il mio si presenta più o meno così:</p>

<pre><code>Section "ServerLayout"
    Identifier     "Layout0"
    Screen      0  "Screen0" 0 0
    InputDevice    "Keyboard0" "CoreKeyboard"
    InputDevice    "Mouse0" "CorePointer"
    Option         "Xinerama" "0"
EndSection

Section "Files"
EndSection

Section "InputDevice"
    # generated from default
    Identifier     "Mouse0"
    Driver         "mouse"
    Option         "Protocol" "auto"
    Option         "Device" "/dev/psaux"
    Option         "Emulate3Buttons" "no"
    Option         "ZAxisMapping" "4 5"
EndSection

Section "InputDevice"
    # generated from default
    Identifier     "Keyboard0"
    Driver         "kbd"
EndSection

Section "Device"
    Identifier     "Device0"
    Driver         "nvidia"
    VendorName     "NVIDIA Corporation"
    BoardName      "GeForce GTX 650"
EndSection

Section "Screen"
    Identifier     "Screen0"
    Device         "Device0"
    DefaultDepth    24
    Option         "Stereo" "0"
    SubSection     "Display"
        Depth       24
    EndSubSection
EndSection
</code></pre>

<p>Quello che dobbiamo fare è andare a modificare la sezione <code>Screen</code> che permette di configurare la disposizione dei monitor. Ma prima di far ciò ci serve conoscrere gli ID dei nostri monitor connessi alla nostra scheda video. Usiamo il comando <code>xrand --query</code>. Dovremmo ottenere un output di questo tipo:</p>

<pre><code>Screen 0: minimum 8 x 8, current 3200 x 1080, maximum 16384 x 16384
VGA-0 connected 1280x1024+1920+0 (normal left inverted right x axis y axis) 376mm x 301mm
   1280x1024      60.0*+   75.0  
   1280x960       60.0  
   1152x864       75.0  
   1024x768       75.0     70.1     60.0  
   800x600        75.0     72.2     60.3     56.2  
   640x480        75.0     72.8     59.9  
HDMI-0 connected 720x480+600+300 (normal left inverted right x axis y axis) 386mm x 290mm
   1280x720       60.0 +   59.9  
   1920x1080      60.1     60.0  
   1440x480       60.1  
   720x480        59.9*    60.1  
   640x480        60.0     59.9  
DVI-D-0 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 531mm x 299mm
   1920x1080      60.0*+   59.9     50.0  
   1680x1050      60.0  
   1600x900       60.0  
   1440x900       59.9  
   1280x1024      75.0     60.0  
   1280x800       59.8  
   1280x720       60.0     59.9     50.0  
   1152x864       75.0  
   1024x768       75.0     70.1     60.0  
   800x600        75.0     72.2     60.3     56.2  
   720x576        50.0  
   720x480        59.9  
   640x480        75.0     72.8     59.9  
DVI-D-1 disconnected (normal left inverted right x axis y axis)
</code></pre>

<p>In questo caso <code>DVI-D-0</code> è il monitor principale (24" Samsung), <code>VGA-0</code> è il monitor secondario (19" QBel) e <code>HDMI-0</code> è la TV.</p>

<p>Con questi dati possiamo iniziare a modificare il file <code>xorg.conf</code>. Nella sezione <code>Screen</code> aggiungiamo:</p>

<pre><code>Option         "TwinView" "1"
Option         "TVStandard" "PAL-B"
Option         "nvidiaXineramaInfoOrder" "DVI-D-0"
Option         "metamodes" "DVI-D-0: nvidia-auto-select +0+0, VGA-0: 1280x1024 +1920+0, HDMI-0: 720x480 +600+300"
</code></pre>

<ul>
<li>Ovvero abilitiamo il TwinView della nostra scheda NVidia.</li>
<li>Diciamo che lo standard della TV è il PAL-B.</li>
<li>Diciamo che il monitor principale è il <code>DVI-D-0</code>, ovvero il Samsung da 24".</li>
<li>Disponiamo i vari monitor:

<ul>
<li>Il monitor <code>DVI-D-0</code> avrà risoluzione auto calcolata (1920x1080) e l'angolo top-left avrà coordinate 0,0</li>
<li>Il monitor <code>VGA-0</code> avrà risoluzione 1280x1024 e l'angolo top-left avrà coordinate 1920,0 ovvero a destra del monitor principale infatti la larghezza del monitor principale (risoluzione orizzontale) è di 1920 pixel, quando termina inizia il monitor secondario.</li>
<li>La TV invece <code>HDMI-0</code> avrà risoluzione 720x480 e l'angono top-left avrà coordinate 600,300 ovvero più o meno al centro del monitor principale.</li>
</ul>
</li>
</ul>


<p>A questo punto salvate il file <code>xorg.conf</code> e riavviate il server X!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add an 'acts_as' method to Active Record]]></title>
    <link href="http://blog.pioz.it/add-an-acts-as-method-to-active-record"/>
    <updated>2013-06-14T16:03:00+02:00</updated>
    <id>http://blog.pioz.it/add-an-acts-as-method-to-active-record</id>
    <content type="html"><![CDATA[<p>Vediamo oggi come aggiungere i famosi metodi magici <em>acts_as</em> alle classi ActiveRecord.</p>

<p>La cosa da fare è create un modulo (magari dentro <code>lib</code>) con il nome del nostro acts_as:</p>

<pre><code>module Ciccio

  extend ActiveSupport::Concern

  included do
  end

  module ClassMethods  
    def acts_as_ciccio(add_power: false)
      # Do some stuffs
      if add_power
        include InstanceMethods2
      end
    end
  end

  module InstanceMethods
    def ciccio
      puts 'ciccio'
    end
  end

  module InstanceMethods2
    def ciccio2
      puts 'ciccio'
    end
  end

end

ActiveRecord::Base.send(:include, Ciccio) # optional
</code></pre>

<p>Caricando questo modulo all'avvio di Rails, tutte le vostre classi che derivano da <code>ActiveRecord::Base</code>
avranno i metodi di classe che sono definiti dentro il modulo <code>Ciccio::ClassMethods</code> e i metodi di istanza
che sono definiti dentro <code>Ciccio::InstanceMethods</code> o dentro <code>Ciccio</code>.
Nel nostro esempio inoltre possiamo aggiungere ad una classe i metodi di istanza dentro <code>Ciccio::InstanceMethods2</code>
solo se invochiamo il metodo di classe <code>acts_as_ciccio(add_power: true)</code> passando l'opzione <code>add_power</code> a true.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mini guida su Xen e Debian]]></title>
    <link href="http://blog.pioz.it/mini-guida-su-xen-e-debian"/>
    <updated>2013-03-27T21:12:00+01:00</updated>
    <id>http://blog.pioz.it/mini-guida-su-xen-e-debian</id>
    <content type="html"><![CDATA[<p><img src="http://www.debian.org/Pics/openlogo-50.png" alt="image" />
Su questo post vedremo una mini guida su come installare una macchina virtuale con Xen
in ambiente GNU/Linux Debian.</p>

<p>Xen è un monitor di macchine virtuali open source rilasciato sotto licenza GPL per piattaforma
x86 e compatibili (al momento sono in corso dei port per x86-64 e per IA-64) sviluppato
presso il Computer Laboratory dell'Università di Cambridge.</p>

<p>Per chiarezza ricordo che la macchina fisica di solito viene identificata con il
nome <code>dom0</code> (domain 0), mentre le macchine virtuali con il nome <code>domU</code>.</p>

<p>Detto ciò iniziamo.</p>

<h2>dom0</h2>

<p>Per prima cosa configuriamo alcune opzioni di rete per permettere alle varie domU di
usare la rete di dom0. Nel file <code>/etc/sysctl.conf</code> aggiungiamo la linea:</p>

<pre><code>net.ipv4.ip_forward=1
</code></pre>

<p>e applichiamo la configurazione con il comando:</p>

<pre><code>sysctl -p
</code></pre>

<!--
Nel famoso file `/etc/network/interfaces` aggiungiamo alla fine:

    # Routing for VMs
    up route add -host IP_STATICO_MACCHINA_VIRTUALE gw IP_STATICO_MACCHINA_VIRTUALE
-->


<p>Fatto questo installiamo il necessario:</p>

<pre><code>$ apt-get install xen-hypervisor xen-linux-system xen-tools xen-utils xenstore-utils xenwatch
</code></pre>

<p>A questo punto dovremmo aver installato anche un nuovo kernel per la nostra
Debian in grado di gestire la virtualizzazione. Dovremmo fare una modifica alla conf di grub
per dare priorità al kernel xen rispetto a quello standard: in pratica bisogna rinominare il
file dentro la directory <code>/etc/grub.d</code> con nome <code>xx_linux</code> DOPO il file <code>yy_linux_xen</code>.
Nel mio caso i file in questione sono <code>10_linux</code> e <code>20_linux_xen</code>. Spostiamo il primo dopo
il secondo semplicemente rinominando il numero con cui inizia il file (10) in un numero maggiore:</p>

<pre><code>$ cd /etc/grub.d/
$ mv 10_linux 50_linux
</code></pre>

<p>Fatto ciò rigeneriamo il file di configurazione di grub (il nostro bootloader preferito) con
il comando:</p>

<pre><code>$ update-grub2
</code></pre>

<p>e facciamo un reboot:</p>

<pre><code>$ reboot
</code></pre>

<p>Controlliamo che sia partito il kernel giusto con il comando:</p>

<pre><code>$ uname -a
Linux 2.6.32-5-xen-amd64 #1 SMP Sun May 6 08:57:29 UTC 2012 x86_64 GNU/Linux
</code></pre>

<p>(Eh si&hellip; Debian stable)</p>

<p>Ora abbiamo un paio di file di configurazione su cui mettere le mani</p>

<ul>
<li><code>/etc/xen/xend-config.sxp</code></li>
<li><code>/etc/xen-tools/xen-tools.conf</code></li>
</ul>


<p>Il primo file <code>/etc/xen/xend-config.sxp</code> gestisce la configurazione del demone xend.
I valori di default vanno bene, anche se dobbiamo fare alcune modifiche per abilitare
il network routing tra la la dom0 e le nostre domU commentando le seguenti righe:</p>

<pre><code>##
# To bridge network traffic, like this:
#
# dom0: ----------------- bridge -&gt; real eth0 -&gt; the network
#                            |
# domU: fake eth0 -&gt; vifN.0 -+
#
# use
#
#(network-script network-bridge)
#
...
#
# If you are using only one bridge, the vif-bridge script will discover that,
# so there is no need to specify it explicitly.
#
#(vif-script vif-bridge)
</code></pre>

<p>e decommentando</p>

<pre><code>## Use the following if network traffic is routed, as an alternative to the
# settings for bridged networking given above.
(network-script network-route)
(vif-script     vif-route)
</code></pre>

<p>Le altre opzioni vanno bene così come sono, ma se volte approfondire c'è sempre la doc.</p>

<p>Il secondo file <code>/etc/xen-tools/xen-tools.conf</code> serve per gestire la configurazione con
cui vengono create le macchine virtuali. Vediamo alcune opzioni:</p>

<pre><code>##
#  Output directory for storing loopback images.
#
#  If you choose to use loopback images, which are simple to manage but
# slower than LVM partitions, then specify a directory here and uncomment
# the line.
#
#  New instances will be stored in subdirectories named after their
# hostnames.
#
##
dir = /var/xen
</code></pre>

<p>Specifica la directory dove verranno salvate le immagini delle macchine virtuali.
In pratica i file che sono a tutti gli effetti gli HD delle vostre macchine virtuali.
Infatti se volete fare un backup di un'intera macchina virtuale salvatevi il suo file
immagine.</p>

<pre><code>#
##
#
# If you don't wish to use loopback images then you may specify an
# LVM volume group here instead
#
##
# lvm = vg0
</code></pre>

<p>Se non volete usare le immagini, ma HD fisici allora dovrete usate un LVM (Logical Volume Manager).</p>

<pre><code>#
##
#
#  Installation method.
#
#  There are four distinct methods which you may to install a new copy
# of Linux to use in your Xen guest domain:
#
#   - Installation via the debootstrap command.
#   - Installation via the rpmstrap command.
#   - Installation via the rinse command.
#   - Installation by copying a directory containing a previous installation.
#   - Installation by untarring a previously archived image.
#
#  NOTE That if you use the "untar", or "copy" options you should ensure
# that the image you're left with matches the 'dist' setting later in
# this file.
#
#
##
#
#
# install-method = [ debootstrap | rinse | rpmstrap | copy | tar ]
#
#
install-method = debootstrap
</code></pre>

<p>In questa sezione di decice in quale modo il sistema operativo delle vostre macchine
virtuali verrà installato. Ci sono diversi modi, ma il più comune e semplice è quello di
usare l'utility <code>debootstrap</code> che viene usato per creare un sistema Debian da zero,
senza la necessità di dpkg o apt. Per fare questo, vengono scaricati i file .deb da
un sito mirror e vengono spacchettati in una directory su cui è eventualmente
possibile fare il chroot.</p>

<pre><code>#
##
#  Disk and Sizing options.
##
#
size   = 4Gb      # Disk image size.
memory = 128Mb    # Memory size
swap   = 128Mb    # Swap size
# noswap = 1      # Don't use swap at all for the new system.
fs     = ext4     # use the EXT3 filesystem for the disk image.
dist   = `xt-guess-suite-and-mirror --suite` # Default distribution to install.
image  = sparse   # Specify sparse vs. full disk images.
</code></pre>

<p>Molto intuitivo, un commento solo alle ultime due opzioni: <code>dist</code> specifica se
installare la versione stable, testing o unstable. Mentre <code>image</code> il tipo di immagine
da usare come file system: possiamo scegliere tra un'immagine <em>sparse</em> oppure tra
un'immagine <em>full disk</em>. Nel primo caso il file aumenta la sua dimensione dinamicamente,
mentre nel secondo caso il file avrà la stessa grandezza del valore scelto qualche riga sopra (<code>size</code>).</p>

<pre><code>#
# Uncomment the following line if you wish to interactively setup a
# new root password for images.
#
passwd = 1
#
</code></pre>

<p>Immettiamo noi quando creiamo le nostre macchine virtuali la password per l'utente root.</p>

<p>Per le altre opzioni vi rimando alla doc.</p>

<p>A questo punto creiamo la directory che conterrà i file immagini delle nostre macchine virtuali
che deve essere quella specificata nella variabile <code>dir</code> del file <code>/etc/xen-tools/xen-tools.conf</code>:</p>

<pre><code>$ mkdir -p /var/xen
$ chmod 755 /var/xen
</code></pre>

<p>Riavviamo xend:</p>

<pre><code>$ /etc/init.d/xend restart
</code></pre>

<h2>domU</h2>

<p>Ora il nostro ambiente Debian/Xen dovrebbe essere pronto per la virtualizzazione.
Andiamo a creare la nostra macchina virtuale. Per far ciò usiamo i tools che xen ci mette a
disposizione, in questo caso <code>xen-create-image</code>. Questo comando necessita di un solo parametro
fondamentale ovvero il nome della vostra macchina virtuale. Poi utilizzerà la configurazione
salvata nel file <code>/etc/xen-tools/xen-tools.conf</code> (vi ricordate?) per il resto. Possiamo comunque
ovverridare alcune opzioni con dei parametri da linea di comando:</p>

<pre><code>$ xen-create-image --hostname=vm1 --size=200Gb --memory=32Gb --ip=www.xxx.yyy.zzz --netmask=255.255.255.248 --gateway=ip.di.dom.0
</code></pre>

<p>Questo comando non farà altro che create il file di configurazione specifico per la macchina
virtuale &ldquo;vm1&rdquo; in <code>/etc/xen/vm1.cfg</code>. Comunque abbiamo creato una configurazione per una
macchina virtuale di nome <em>vm1</em> con HD di capacità 200Gb, memoria ram da 32Gb, ip statico www.xxx.yyy.zzz,
netmask 255.255.255.248 e gateway ip.di.dom.0 (ovviamente dom0 deve avere un HD > di 200Gb e memoria RAM > di 32Gb).</p>

<p>Ok, adesso finalmente creiamo sta maledetta macchina:</p>

<pre><code>$ xm create /etc/xen/vm1.cfg
</code></pre>

<p>La macchina virtuale si avvia, per vedere lo stato del sistema usate il comodo comando:</p>

<pre><code>$ xm list
Name                                        ID   Mem VCPUs      State   Time(s)
Domain-0                                     0  2353     8     r-----  24266.4
vm1                                          3 30720     8     -b---- 150851.7
</code></pre>

<p>I valori di <code>State</code> possono essere:</p>

<ul>
<li>r - <em>running</em>: la macchina sta girando e usando una CPU.</li>
<li>b - <em>blocked</em>: la macchina è bloccata e non sta usando la CPU. Questo perchè sta aspettando per operazioni di IO oppure è in sleep perchè non ha niente da fare.</li>
<li>p - <em>paused</em>: la macchina è in pausa (<code>xm pause</code>).</li>
<li>s - <em>shutdown</em>: la macchina si sta spegnendo o riavviando o sospendendo.</li>
<li>c - <em>crashed</em>: la macchina è crashata.</li>
<li>d - <em>dying</em>.</li>
</ul>


<p>Per accedere alla vostra macchina virtuale potete o connettervi via ssh oppure usare il comando:</p>

<pre><code>$ xm console vm1
</code></pre>

<p>che vi apre una console alla vostra macchina. Per uscire dalla console usare la combinazione <code>ctrl+]</code>.</p>

<p>Per spegnere la macchina:</p>

<pre><code>$ xm shutdown vm1
</code></pre>

<p>Per mettere in pausa la macchina:</p>

<pre><code>$ xm pause vm1
</code></pre>

<p>Per riattivarla:</p>

<pre><code>$ xm restore vm1
</code></pre>

<p>Per eliminare la macchina:</p>

<pre><code>$ xm delete vm1
</code></pre>

<p>Ora per abilitare la connessione sulla macchina virtuale domU <code>vm1</code> dobbiamo editare
il file <code>/etc/network/interfaces</code> nel seguente modo:</p>

<pre><code># The primary network interface
auto eth0
iface eth0 inet static
 address IP.DI.DOMU
 gateway IP.DI.DOM0
 netmask NETMASK.DI.DOM0
 broadcast BROADCAST.DI.DOM0
 pointopoint IP.DI.DOM0
</code></pre>

<p>Se volete che al boot di dom0 partano anche le vostre macchine virtuali allora
dovete fare un link simbolico del file di configurazione delle vm nella cartella <code>/etc/xen/auto</code></p>

<pre><code>$ ln -s /etc/xen/vm1.cfg /etc/xen/auto
</code></pre>

<p>Infine se un dì avrete bisogno di aumentare lo spazio degli &ldquo;HD&rdquo; delle vostre macchine virtuali dovrete aumentare i file immagini.
Ciò è possibile con i comandi <code>dd</code> e <code>resize2fs</code>:</p>

<pre><code>$ dd if=/dev/zero bs=1M count=2000 &gt;&gt; /etc/xen/domains/vm1/disk.img
$ resize2fs -f /etc/xen/domains/vm1/disk.img
</code></pre>

<p>Con questo comando abbiamo aggiunto 2 Gigabyte all'&ldquo;HD&rdquo; della macchina virtuale vm1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gestire differenti versioni di gcc su OSX]]></title>
    <link href="http://blog.pioz.it/gestire-differenti-versioni-di-gcc-su-osx"/>
    <updated>2013-03-27T20:56:00+01:00</updated>
    <id>http://blog.pioz.it/gestire-differenti-versioni-di-gcc-su-osx</id>
    <content type="html"><![CDATA[<p>Vediamo in questo post come gestire differenti versioni di gcc su Mac OS X con port.</p>

<p>La storia è molto semplice grazie all'utility <code>gcc_select</code> che installiamo nel seguente modo:</p>

<pre><code>$ sudo port install gcc_select
</code></pre>

<p>A questo punto possiamo vedere le varie versioni di gcc che sono installate sul nostro
sistema operativo con il comando:</p>

<pre><code>$ port select --list gcc
Available versions for gcc:
    llvm-gcc42
    mp-gcc47 (active)
    none
</code></pre>

<p>In questo esempio il gcc che viene usato è il gcc 4.7 installato con port.</p>

<p>Per switchare versione possiamo dare il comando:</p>

<pre><code>$ sudo port select --set gcc llvm-gcc42
Selecting 'llvm-gcc42' for 'gcc' succeeded. 'llvm-gcc42' is now active.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chiamate ricorsive Ruby vs Python]]></title>
    <link href="http://blog.pioz.it/chiamate-ricorsive-ruby-vs-python"/>
    <updated>2012-08-03T21:27:00+02:00</updated>
    <id>http://blog.pioz.it/chiamate-ricorsive-ruby-vs-python</id>
    <content type="html"><![CDATA[<p>Facciamo un piccolo test: calcoliamo Fibonacci ricorsivamente in Ruby (v2.0.0) e in Python (v2.7.2) e vediamo chi vince in termini di tempo</p>

<p>Ruby Fibonacci code (<code>f.rb</code>)</p>

<pre><code>def fib(n)
  if n == 0 || n == 1
    n
  else
    fib(n-1) + fib(n-2)
  end
end

36.times { |i| fib(i) }
</code></pre>

<p>Python Fibonacci code (<code>f.py</code>)</p>

<pre><code>def fib(n):
  if n == 0 or n == 1:
    return n
  else:
    return fib(n-1) + fib(n-2)

for i in range(36):
  fib(i)
</code></pre>

<p>Ora lanciamo i due programmi nel seguente modo:</p>

<pre><code>$ time ruby f.rb &amp;&amp; time python f.py
real  0m4.795s
user  0m4.787s
sys   0m0.007s

real  0m12.935s
user  0m12.849s
sys   0m0.049s
</code></pre>

<p>Ecco Ruby impiega <strong>4.795</strong> secondi mentre Python <strong>12.935</strong> secondi!</p>

<p><strong>Ruby vince nettamente su Python!!</strong></p>

<p>Oh beh provate però questo codice in C (<code>f.c</code>):</p>

<pre><code>int
fib (int n)
{
  if (n == 0 || n == 1)
    return n;
  else
    return fib (n-1) + fib (n-2);
}

int
main ()
{
  int i;
  for (i = 0; i &lt; 36; i++)
    fib (i);
}
</code></pre>

<p>Compiliamo:</p>

<pre><code> gcc f.c
</code></pre>

<p>Ed eseguiamo:</p>

<pre><code>$ time ./a.out
real  0m0.232s
user  0m0.229s
sys   0m0.003s
</code></pre>

<p>0.232 secondi!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colori nella shell]]></title>
    <link href="http://blog.pioz.it/colori-nella-shell"/>
    <updated>2012-07-27T21:43:00+02:00</updated>
    <id>http://blog.pioz.it/colori-nella-shell</id>
    <content type="html"><![CDATA[<p>Per colorare una string nella shell possiamo usare questo template:</p>

<pre><code>\033[CODE1;CODE2;CODE3mTESTO\033[0m
</code></pre>

<p>CODE1 possono essere una serie di valori che alterano lo stile del testo, di seguito una tabella:</p>

<ul>
<li><code>0</code> Normal Characters</li>
<li><code>1</code> Bold Characters</li>
<li><code>4</code> Underlined Characters</li>
<li><code>5</code> Blinking Characters</li>
<li><code>7</code> Reverse video Characters</li>
</ul>


<p>CODE2 invece rappresenta il colore, di seguito una tabella:</p>

<ul>
<li><code>30</code> Black</li>
<li><code>31</code> Red</li>
<li><code>32</code> Green</li>
<li><code>33</code> Yellow</li>
<li><code>34</code> Blue</li>
<li><code>35</code> Magenta</li>
<li><code>36</code> Cyan</li>
<li><code>37</code> White</li>
</ul>


<p>CODE3 rappresenta il colore di sfondo del testo, di seguito una tabella:</p>

<ul>
<li><code>40</code> Black</li>
<li><code>41</code> Red</li>
<li><code>42</code> Green</li>
<li><code>43</code> Yellow</li>
<li><code>44</code> Blue</li>
<li><code>45</code> Magenta</li>
<li><code>46</code> Cyan</li>
<li><code>47</code> White</li>
</ul>


<p>Per resettare il testo allo stile di default usare il carattere <code>\033[0m</code>.</p>

<p>Alcuni esempi:</p>

<pre><code>echo -e "\033[31mQUESTO TESTO SARA STAMPATO IN ROSSO\033[0m"
echo -e "\033[1;36mQUESTO TESTO SARA STAMPATO IN GROSSETTO E COLOR CIANO\033[0m"
echo -e "\033[1;35;47mQUESTO TESTO SARA STAMPATO IN GROSSETTO E COLOR MAGENTA SU SFONDO BIANCO\033[0m"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[init.d script to run Apache SOLR]]></title>
    <link href="http://blog.pioz.it/script-run-apache-solr"/>
    <updated>2011-02-25T21:40:00+01:00</updated>
    <id>http://blog.pioz.it/script-run-apache-solr</id>
    <content type="html"><![CDATA[<p>Copiate il seguente script in <code>/etc/init.d/solr</code></p>

<pre><code>#!/bin/sh

PATH=/opt/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=solr
DESC=apache-solr
VERSION=1.4.1
SOLR_PATH=/opt/solr-$VERSION
COMMAND=/usr/bin/java
OPTIONS="-Dsolr.solr.home=$SOLR_PATH/solr -Djetty.home=$SOLR_PATH -jar $SOLR_PATH/start.jar"    
PIDFILE=/var/run/$NAME.pid

test -x $COMMAND || exit 0
test -f $SOLR_PATH/start.jar || exit 0

set -e

case "$1" in
  start)
        if [ -f $PIDFILE ]; then
          echo "$PIDFILE exists. $NAME may be running."
        else
          echo -n "Starting $DESC: "
          start-stop-daemon -b -p$PIDFILE -d$SOLR_PATH --start --quiet --exec $COMMAND -- $OPTIONS
          sleep 3
          echo `ps -ef | grep -v grep | grep "$COMMAND $OPTIONS" | awk '{print $2}'` &gt; $PIDFILE
          echo "$NAME."
        fi
        ;;
  stop)
        if [ -f $PIDFILE ]; then
          echo -n "Stopping $DESC: "
          kill `cat $PIDFILE`
          rm -f $PIDFILE
          echo "$NAME."
        else
          echo "$PIDFILE does not exist. $NAME may be not running."
        fi
        ;;
  restart)
        /etc/init.d/$NAME stop
        sleep 1
        /etc/init.d/$NAME start
        ;;
  *)
        echo "Usage: /etc/init.d/$NAME {start|stop|restart}" &gt;&amp;2
        exit 1
        ;;
esac

exit 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configurare i tasti HOME e END nel terminale di OSX]]></title>
    <link href="http://blog.pioz.it/tasti-home-end-terminale-osx"/>
    <updated>2010-07-21T21:35:00+02:00</updated>
    <id>http://blog.pioz.it/tasti-home-end-terminale-osx</id>
    <content type="html"><![CDATA[<p>Per usare i tasti HOME ed END nel modo classico (HOME va all'inizio della riga, END alla fine) guardate l'immagine qua sotto:</p>

<p><img src="http://i.imgur.com/Bdged.png" alt="image" /></p>

<p>Per generare la string <code>\005</code> premere ctrl+e, mentre per la string <code>\001</code> ctrl+a.<br/>
A questo punto usando option+RIGHT e option+LEFT ci muoviamo all'inizio o alla fine della riga.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Youtube flv 2 mp3]]></title>
    <link href="http://blog.pioz.it/youtube2flv"/>
    <updated>2010-06-08T21:24:00+02:00</updated>
    <id>http://blog.pioz.it/youtube2flv</id>
    <content type="html"><![CDATA[<p>Vediamo come convertire un video flv di Youtube in mp3 usando ffmpeg.</p>

<p>Per prima cosa dobbiamo ottenere l'URL esatto del video per poter scaricare l'flv.
Per far ciò ci serve un token che cambia nel tempo ma che possiamo ottenere dal file <code>video_info</code>; scarichiamolo:</p>

<pre><code>http://www.youtube.com/get_video_info?video_id=VugK063j0Zo
</code></pre>

<p>Questo file contiene una serie di valori in stile parametri http. A noi serve quello con chiave <strong>token</strong>: nell'esempio <code>token=vjVQa1PpcFNk6LFs5OQXj-teHu8POPhx7isbKGtGbOc%3D</code>.</p>

<p>A questo punto abbiamo tutto il necessario per generare l'url per il download diretto del video flv:</p>

<pre><code>http://www.youtube.com/get_video?video_id=VIDEOID&amp;t=TOKEN
</code></pre>

<p>nell'esempio:</p>

<pre><code>http://www.youtube.com/get_video?video_id=VugK063j0Zo&amp;t=vjVQa1PpcFNk6LFs5OQXj-teHu8POPhx7isbKGtGbOc%3D
</code></pre>

<p>Bene, ora possiamo con ffmpeg ottenere direttamente l'audio del video in formato mp3 con il seguente comando:</p>

<pre><code>ffmpeg -i 'URL DIRETTO DEL VIDEO' -acodec libmp3lame -ac 2 -ab 128kb -vn -y file_output.mp3
</code></pre>

<p>Nell'esempio</p>

<pre><code>ffmpeg -i 'http://www.youtube.com/get_video?video_id=VugK063j0Zo&amp;t=vjVQa1PpcFMpsZHHpcVB1lB6w_EvoJYGbZTNi4KQ2g4%3D' -acodec libmp3lame -ac 2 -ab 128kb -vn -y magically_magical.mp3
</code></pre>

<p>It&rsquo;s magical&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Streaming di Radio 105 e Virgin radio]]></title>
    <link href="http://blog.pioz.it/streaming-radio-105-virgin-radio"/>
    <updated>2010-02-24T21:22:00+01:00</updated>
    <id>http://blog.pioz.it/streaming-radio-105-virgin-radio</id>
    <content type="html"><![CDATA[<p>L'URL per ascoltare in streaming Radio 105 è</p>

<pre><code>http://shoutcast.unitedradio.it:1101
</code></pre>

<p>Mentre per Virgin Radio</p>

<pre><code>http://shoutcast.unitedradio.it:1301
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configurare un multi domain mail server con Postfix, Dovecot e autenticazione sicura]]></title>
    <link href="http://blog.pioz.it/configurare-multi-domain-mail-server-postfix-dovecot"/>
    <updated>2009-12-11T10:22:00+01:00</updated>
    <id>http://blog.pioz.it/configurare-multi-domain-mail-server-postfix-dovecot</id>
    <content type="html"><![CDATA[<p>Allora in questa guida vedremo come installare e configurare un mail server professionale.
Il tutto è stato testato in una <a href="http://www.debian.org">Debian</a> 5.0 stable.</p>

<p>Con questo server mail sarà possibile gestire più domini e quindi per esempio allo stesso tempo mantenere mail del tipo <em>@pioz.it</em> e <em>@barison.org</em>.
Il tutto avverrà dando la possibilità all'utente se utilizzare comunicazioni criptate (come SSL o TLS) o in chiaro, se utilizzare autenticazione in chiaro (PLAIN) o criptata (CRAM-MD5 o DIGEST-MD5). Dando la possibilità di usare protocollo IMAP o POP3.</p>

<p>Il necessario:</p>

<ul>
<li><strong>Postfix</strong> come server SMTP</li>
<li><strong>Dovecot</strong> come server POP3 e IMAP</li>
<li><strong>MySQL</strong> come database per il salvataggio degli utenti, password e domini</li>
<li><strong>SASL</strong> per criptare il trasferimento dei dati tra server e client</li>
</ul>


<p>Installiamo il necessario:</p>

<pre><code>$ apt-get install postfix postfix-mysql
$ apt-get install dovecot-imapd dovecot-pop3d
$ apt-get install mysql-server-5.0
$ apt-get install libsasl2 sasl2-bin libsasl2-modules
</code></pre>

<h3>Passo 0: domini</h3>

<p>Per capirci meglio usiamo le seguenti convenzioni: il dominio associato al mail server sarà <code>ciccio.com</code>, mentre i domini che hosteremo saranno <code>pippo.it</code> e <code>pluto.com</code>.</p>

<p>Questo significa che tutti e tre i domini dovranno avere un record MX nel DNS chiamato mail.nomedominio che punterà all'IP del nostro server mail.</p>

<p>Inoltre dato che useremo anche SSL per il trasferimento dei dati tra server e client è necessario avere un certificato (valido) per il dominio <code>mail.ciccio.com</code>.</p>

<h2>PASSO 1: configurazione database</h2>

<p>Per prima cosa creiamo un database per contenere gli utenti che potranno usufruire del nostro servizio mail.
Creiamo un file e lo chiamiamo <code>mail.sql</code> e ci incolliamo dentro il seguente codice SQL:</p>

<pre><code>create database mail;

use mail;

CREATE TABLE user (
  domain varchar(255) NOT NULL,
  username varchar(255) NOT NULL,
  password varchar(255) NOT NULL,
  quota int(255) NOT NULL default 0,
  active tinyint(1) NOT NULL default 1,
  admin tinyint(1) NOT NULL default 0,
  PRIMARY KEY (username, domain)
);

CREATE TABLE alias (
  address varchar(255) NOT NULL,
  goto varchar(255) NOT NULL,
  active tinyint(1) NOT NULL default 1,
  PRIMARY KEY (address, goto)
);
</code></pre>

<p>A questo punto eseguiamo il codice SQL e creiamo un utente con privilegi ristretti che verrà usato da postfix e dovecot per connettersi al DB:</p>

<pre><code>$ mysql -u root -p
mysql&gt; source mail.sql;
mysql&gt; GRANT select,insert,update,delete ON mail.* TO 'postfix'@'localhost' IDENTIFIED BY 'password';
mysql&gt; quit;
</code></pre>

<p>Ottimo, ora abbiamo il nostro BD&hellip; 2 tabelle: una per gli utenti e una per gli alias. Gli alias sono delle mail che sono alias di mail &ldquo;reali&rdquo;.</p>

<p>Vediamo, prima di proseguire, i campi della tabella <code>user</code>:</p>

<ul>
<li><strong>domain</strong>: il dominio dell'indirizzo mail (per esempio <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#x6c;&#117;&#x63;&#97;&#x40;&#112;&#105;&#112;&#x70;&#x6f;&#x2e;&#x69;&#x74;">&#x6c;&#x75;&#x63;&#97;&#64;&#112;&#x69;&#x70;&#112;&#111;&#x2e;&#x69;&#x74;</a> ha dominio pippo.it).</li>
<li><strong>username</strong>: lo username per accedere alla casella di posta, nel nostro caso, <strong>IMPORTANTE</strong>, è l'intero indirizzo mail (quindi non luca, ma <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#x6c;&#x75;&#x63;&#x61;&#64;&#112;&#x69;&#x70;&#x70;&#111;&#46;&#105;&#x74;">&#108;&#x75;&#x63;&#97;&#64;&#112;&#105;&#x70;&#x70;&#x6f;&#46;&#105;&#116;</a>). Questo perchè avendo mail con domini diversi dobbiano distinguerle in modo univoco.</li>
<li><strong>password</strong>: la password per accedere alla casella di posta. Vedremo che sarà criptata con AES.</li>
<li><strong>quota</strong>: quota casella di posta.</li>
<li><strong>active</strong>: l'account mail è attivo o disattivo.</li>
<li><strong>admin</strong>: campo utile per verificare, magari da qualche app esterna, se l'utente può creare altri account.</li>
</ul>


<p>I campi della tabella <code>alias</code>:</p>

<ul>
<li><strong>address</strong>: indirizzo mail dell'alias.</li>
<li><strong>goto</strong>: è alias di.</li>
<li><strong>active</strong>: l'alias è attivo o disattivo.</li>
</ul>


<h2>PASSO 2: creazione delle Maildir</h2>

<p>Le nostre caselle di posta saranno sottoforma di maildir e le posizioniamo in <code>/etc/vmail/</code>. Creiamole impostando i relativi permessi:</p>

<pre><code>$ adduser postfix mail
$ adduser dovecot mail
$ mkdir /var/vmail
$ chmod 770 /var/vmail
$ chown mail.mail /var/vmail
</code></pre>

<p>Bene, in pratica la casella di posta per <a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#58;&#108;&#117;&#99;&#97;&#x40;&#x70;&#x69;&#x70;&#x70;&#111;&#46;&#x69;&#x74;">&#x6c;&#x75;&#x63;&#x61;&#64;&#112;&#105;&#x70;&#112;&#111;&#46;&#105;&#116;</a> sarà in <code>/var/vmail/luca@pippo.it</code>. Essa verrà creata in automatico al primo login.</p>

<h2>PASSO 3: configurazione Dovecot</h2>

<p>Adesso è arrivato il momento di configurare <a href="http://www.dovecot.org/">Dovecot</a>: il server pop e imap.</p>

<p>Dovecot, per i nostri usi consiste in due file di configurazione:</p>

<ul>
<li><code>/etc/dovecot/dovecot.conf</code>: file di configurazione principale.</li>
<li><code>/etc/dovecot/dovecot-sql.conf</code>: file di configurazione per la connessione e recupero dati dal database MySQL.</li>
</ul>


<p>Vediamo il primo:</p>

<pre><code>## Dovecot configuration file

protocols = pop3 pop3s imap imaps
disable_plaintext_auth = no
log_path = /var/log/mail.log
log_timestamp = "%Y-%m-%d %H:%M:%S "

ssl_disable = no
ssl_cert_file = /etc/ssl/mycerts/mail.ciccio.com/cert.crt
ssl_key_file = /etc/ssl/mycerts/mail.ciccio.com/key.key
ssl_ca_file = /etc/ssl/mycerts/mail.ciccio.com/root.crt

mail_location = maildir:/var/vmail/%u/
mail_privileged_group = mail
#first_valid_uid = 150
first_valid_uid = 8

protocol imap {
  mail_plugins = autocreate
  plugin {
    autocreate  = Trash
    autocreate2 = Junk
    autocreate3 = Drafts
    autocreate4 = Sent
    autocreate5 = INBOX

    autosubscribe  = Trash
    autosubscribe2 = Junk
    autosubscribe3 = Drafts
    autosubscribe4 = Sent
    autosubscribe5 = INBOX
  }
}

protocol pop3 {
  pop3_uidl_format = %08Xu%08Xv
}

protocol lda {
  # log_path = /etc/dovecot/sieve.log
  mail_plugins = cmusieve
  postmaster_address = enrico@megiston.it
}

plugin {
  sieve = /etc/dovecot/sieve/default.sieve
}

auth_verbose = no
auth_debug = no
auth_debug_passwords = no
auth default {
  mechanisms = login plain digest-md5 cram-md5
  passdb sql {
    args = /etc/dovecot/dovecot-sql.conf
  }
  userdb sql {
    args = /etc/dovecot/dovecot-sql.conf
  }
  user = root
  socket listen {
    master {
      path = /var/run/dovecot/auth-master
      mode = 0660
      user = dovecot
      group = mail
    }
    client {
      path = /var/spool/postfix/private/auth
      mode = 0660
      user = postfix
      group = mail
    }
  }
}
</code></pre>

<p>Adesso non entriamo nel dettaglio in quanto non ho voglia di star qua a scrivere, comunque due cosette sulle cose principali:</p>

<ul>
<li>La prima riga specifica i protocolli che vogliamo usare. Gli abilitiamo tutti per dare libertà totale ai nostri utenti. Mi raccomando di avere il certificato per il vostro dominio, nell'esempio per <code>mail.ciccio.com</code>.</li>
<li><code>first_valid_uid</code> deve coincidere con uid dell'utente <code>mail</code>, solitamente 8. Per verificare lanciate il comando &ldquo;<code>id mail</code>&rdquo;.</li>
<li>Importante è la riga &ldquo;<code>mechanisms = login plain digest-md5 cram-md5
</code>&rdquo; che specifica i meccanismi di autenticazione. Noi li abilitiamo tutti, sia quelli in chiaro che criptati in modo da permettere anche a client poco sofisticati (ad esempio quelli dei cellulari) di connettersi al nostro server. Mentre per client completi dare la possibilità di usare autenticazione cifrata (ad esempio Mozilla Thunderbird).</li>
<li><code>userdb</code> e <code>passdb</code> vengono recuperati dall'altro file di configurazione.</li>
<li>Infine fondamentale la sezione <code>socket listen</code> che apre una socket per permettere ad altri programmi di usare il sistema di autenticazione di Dovecot, nel nostro caso Postfix.</li>
</ul>


<p>L'altro file di configurazione per il recupero degli utenti e delle password risulta essere una cosa del genere:</p>

<pre><code>driver = mysql
connect = host=127.0.0.1 dbname=mail user=postfix password=password
default_pass_scheme = PLAIN
user_query = SELECT concat('maildir:/var/vmail/', username, '/') as mail, 8 AS uid, 8 AS gid FROM user WHERE username = '%u' AND domain = '%d' AND active = '1'
password_query = SELECT username AS user, AES_DECRYPT(UNHEX(password),'AESKEY') AS password FROM user WHERE username = '%u' AND domain = '%d' AND active = 1
</code></pre>

<p>Commentiamo:</p>

<ul>
<li><code>driver</code> specifica che il database è MySQL.</li>
<li><code>connect</code> info per la connessione al database.</li>
<li><code>default_pass_scheme</code> usiamo PLAIN, infatti se diamo la possibilità di usare meccanismi di autenticazione in chiaro e non in chiaro (es plain e cram-md5) non c'è alternativa, non possiamo salvare la password in modo criptato per meccanismo PLAIN. Comunque niente paura, la password non sarà salvata in chiaro ma criptata con la funzione AES di mysql e trasformata da binario a text con la funzione HEX.</li>
<li><code>user_query</code> è la query per recuperare l'utente. Da notare che uid e gid devono essere lo stesso dell'utente <code>mail</code> (<code>id mail</code>). Questa in realtà deve recuperare il path della maildir dell'utente, per questo c'è il <code>concat</code>.</li>
<li><code>user_password</code> è la query per recuperare le password decriptandole usando una chiave (nell'esempio AESKEY).</li>
</ul>


<p>Bene ora Dovecot è pronto. Riavviamo Dovecot con <code>/etc/init.d/dovecot restart</code></p>

<h2>PASSO 4: configurazione Postfix</h2>

<p>Postfix è il server SMTP. Viene gestito da due file di configurazione principali, più altri per la connessione con il database:</p>

<ol>
<li><code>/etc/postfix/master.cf</code></li>
<li><code>/etc/postfix/main.cf</code></li>
<li><code>/etc/postfix/mysql_virtual_alias_maps.cf</code></li>
<li><code>/etc/postfix/mysql_virtual_domains_maps.cf</code></li>
<li><code>/etc/postfix/mysql_virtual_mailbox_maps.cf</code></li>
</ol>


<p>Il master (1):</p>

<pre><code>#
# Postfix master process configuration file.  For details on the format
# of the file, see the master(5) manual page (command: "man 5 master").
#
# Do not forget to execute "postfix reload" after editing this file.
#
# ==========================================================================
# service type  private unpriv  chroot  wakeup  maxproc command + args
#               (yes)   (yes)   (yes)   (never) (100)
# ==========================================================================
smtp      inet  n       -       n       -       -       smtpd
#submission inet n       -       -       -       -       smtpd
#  -o smtpd_tls_security_level=encrypt
#  -o smtpd_sasl_auth_enable=yes
#  -o smtpd_client_restrictions=permit_sasl_authenticated,reject
#  -o milter_macro_daemon_name=ORIGINATING
# Decommentiamo il seguito per abilitare il wrapper SSL su TLS
smtps     inet  n       -       -       -       -       smtpd
  -o smtpd_tls_wrappermode=yes
  -o smtpd_sasl_auth_enable=yes
  -o smtpd_client_restrictions=permit_sasl_authenticated,reject
#  -o milter_macro_daemon_name=ORIGINATING
#628      inet  n       -       -       -       -       qmqpd
pickup    fifo  n       -       -       60      1       pickup
cleanup   unix  n       -       -       -       0       cleanup
qmgr      fifo  n       -       n       300     1       qmgr
#qmgr     fifo  n       -       -       300     1       oqmgr
tlsmgr    unix  -       -       -       1000?   1       tlsmgr
rewrite   unix  -       -       -       -       -       trivial-rewrite
bounce    unix  -       -       -       -       0       bounce
defer     unix  -       -       -       -       0       bounce
trace     unix  -       -       -       -       0       bounce
verify    unix  -       -       -       -       1       verify
flush     unix  n       -       -       1000?   0       flush
proxymap  unix  -       -       n       -       -       proxymap
proxywrite unix -       -       n       -       1       proxymap
smtp      unix  -       -       -       -       -       smtp
# When relaying mail as backup MX, disable fallback_relay to avoid MX loops
relay     unix  -       -       -       -       -       smtp
        -o smtp_fallback_relay=
#       -o smtp_helo_timeout=5 -o smtp_connect_timeout=5
showq     unix  n       -       -       -       -       showq
error     unix  -       -       -       -       -       error
retry     unix  -       -       -       -       -       error
discard   unix  -       -       -       -       -       discard
local     unix  -       n       n       -       -       local
virtual   unix  -       n       n       -       -       virtual
lmtp      unix  -       -       -       -       -       lmtp
anvil     unix  -       -       -       -       1       anvil
scache    unix  -       -       -       -       1       scache
#
# ====================================================================
# Interfaces to non-Postfix software. Be sure to examine the manual
# pages of the non-Postfix software to find out what options it wants.
#
# Many of the following services use the Postfix pipe(8) delivery
# agent.  See the pipe(8) man page for information about ${recipient}
# and other message envelope options.
# ====================================================================
#
# maildrop. See the Postfix MAILDROP_README file for details.
# Also specify in main.cf: maildrop_destination_recipient_limit=1
#
maildrop  unix  -       n       n       -       -       pipe
  flags=DRhu user=vmail argv=/usr/bin/maildrop -d ${recipient}
#
# See the Postfix UUCP_README file for configuration details.
#
uucp      unix  -       n       n       -       -       pipe
  flags=Fqhu user=uucp argv=uux -r -n -z -a$sender - $nexthop!rmail ($recipient)
#
# Other external delivery methods.
#
ifmail    unix  -       n       n       -       -       pipe
  flags=F user=ftn argv=/usr/lib/ifmail/ifmail -r $nexthop ($recipient)
bsmtp     unix  -       n       n       -       -       pipe
  flags=Fq. user=bsmtp argv=/usr/lib/bsmtp/bsmtp -t$nexthop -f$sender $recipient
scalemail-backend unix  -       n       n       -       2       pipe
  flags=R user=scalemail argv=/usr/lib/scalemail/bin/scalemail-store ${nexthop} ${user} ${extension}
mailman   unix  -       n       n       -       -       pipe
  flags=FR user=list argv=/usr/lib/mailman/bin/postfix-to-mailman.py
  ${nexthop} ${user}
dovecot   unix  -       n       n       -       -       pipe
  flags=DRhu user=mail argv=/usr/lib/dovecot/deliver -n -f ${sender} -d ${recipient}
</code></pre>

<p>Non commentiamo, è molto simile a quello di default a parte un paio di modifiche, tra cui l'abilitazione del wrapper SSL su TLS.</p>

<p>Il main.cf (2):</p>

<pre><code># MAIN POSTFIX CONFIGUTARION #

# smtpd_banner = $myhostname ESMTP $mail_name (Debian/GNU)
# biff = no
# append_dot_mydomain = yes
debug_peer_level = 3
myhostname = mail.ciccio.com

virtual_uid_maps = static:8
virtual_gid_maps = static:8
virtual_minimum_uid = 8
virtual_mailbox_base = /var/vmail/
virtual_alias_maps = mysql:/etc/postfix/mysql_virtual_alias_maps.cf
virtual_mailbox_domains = mysql:/etc/postfix/mysql_virtual_domains_maps.cf
virtual_mailbox_maps = mysql:/etc/postfix/mysql_virtual_mailbox_maps.cf
virtual_transport = virtual

# SASL #

smtpd_sasl_auth_enable = yes
smtpd_sasl_local_domain = $myhostname
smtpd_sasl_security_options = noanonymous
smtpd_sasl_auth_header = yes
smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth
broken_sasl_auth_clients = yes
smtpd_recipient_restrictions =
  permit_sasl_authenticated,
  reject_unauth_destination

# TLS #

smtp_use_tls = yes
smtpd_use_tls = yes
smtpd_tls_key_file = /etc/ssl/mycerts/mail.ciccio.com/key.key
smtpd_tls_cert_file = /etc/ssl/mycerts/mail.ciccio.com/cert.crt
smtpd_tls_CAfile = /etc/ssl/mycerts/mail.ciccio.com/root.crt
smtpd_tls_loglevel = 1
smtpd_tls_received_header = yes
smtpd_tls_session_cache_timeout = 3600s
tls_random_source = dev:/dev/urandom
</code></pre>

<p>Anche qua non commentiamo&hellip; da notare solo che SASL per autenticare usa la socket che gli viene messa a disposizione da Dovecot.</p>

<p>E gli altri tre in ordine per la connessione al BD:</p>

<pre><code># /etc/postfix/mysql_virtual_alias_maps.cf
user = postfix
password = password
hosts = 127.0.0.1
dbname = mail
table = alias
select_field = goto
where_field = address

# /etc/postfix/mysql_virtual_domains_maps.cf
user = postfix
password = password
hosts = 127.0.0.1
dbname = mail
table = user
select_field = domain
where_field = domain

# /etc/postfix/mysql_virtual_mailbox_maps.cf
user = postfix
password = password
hosts = 127.0.0.1
dbname = mail
query = SELECT concat(username,'/') FROM user WHERE username = '%s' AND active = 1
</code></pre>

<p>Ok, per Postfix abbiamo finito. Riavviamolo con <code>/etc/init.d/postfix/restart</code></p>

<h2>PASSO 5: proviamo il tutto</h2>

<p>Inseriamo gli utenti nel nosto DB e poi testiamo il tutto usando Thunderbird.
Per aggiungere un utente usiamo la seguente query:</p>

<pre><code>$ mysql -u postfix -p
$ insert into user(domain,username,password) values("pippo.it", "luca@pippo.it", HEX(AES_ENCRIPT('passwordchevoglio', 'AESKEY')));
$ insert into user(domain,username,password) values("pluto.com", "nicola@pluto.com", HEX(AES_ENCRIPT('passworddd', 'AESKEY')));
</code></pre>

<p>Vediamo per esempio come configurare Thunderbird:
<img src="http://media.tumblr.com/tumblr_kuhdz2ptTT1qa79c0.png" alt="" /></p>

<h3>Alcune note</h3>

<p>Ricordate di installare Spamassasin per Postfix e magari una bella webmail come <a href="http://roundcube.net/">Roundcube</a>.</p>

<p>Se avete dubbi, chiarimenti, o volete approfondire alcune sezioni non fatevi scrupoli a contattarmi al mio indirizzo mail <a href="mailto:pioz@pioz.it">pioz@pioz.it</a>.</p>
]]></content>
  </entry>
  
</feed>
